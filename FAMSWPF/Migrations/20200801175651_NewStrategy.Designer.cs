// <auto-generated />
using System;
using FAMSWPF.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FAMSWPF.Migrations
{
    [DbContext(typeof(FAMSContext))]
    [Migration("20200801175651_NewStrategy")]
    partial class NewStrategy
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FAMSWPF.Library.Models.Assets.CurrentAssets.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AccOpenDt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("BankBranch")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("MainAccount")
                        .HasColumnType("int");

                    b.HasKey("BankId");

                    b.HasIndex("MainAccount")
                        .IsUnique();

                    b.ToTable("BankAccounts","Assets");
                });

            modelBuilder.Entity("FAMSWPF.Library.Models.Assets.CurrentAssets.Cash", b =>
                {
                    b.Property<int>("CashId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("MainAccount")
                        .HasColumnType("int");

                    b.HasKey("CashId");

                    b.HasIndex("MainAccount")
                        .IsUnique();

                    b.ToTable("CashAccounts","Assets");
                });

            modelBuilder.Entity("FAMSWPF.Library.Models.Foundation.AccountNature", b =>
                {
                    b.Property<string>("NatureId")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("DebitNature")
                        .HasColumnType("bit");

                    b.Property<string>("NatureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("NatureId");

                    b.ToTable("AccountNature","Foundation");
                });

            modelBuilder.Entity("FAMSWPF.Library.Models.Foundation.Currency", b =>
                {
                    b.Property<string>("CurrencyId")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("ConvertRatio")
                        .HasColumnType("numeric(18, 9)");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("SinceWhen")
                        .HasColumnType("datetime2");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currency","Foundation");
                });

            modelBuilder.Entity("FAMSWPF.Library.Models.Foundation.MainAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NatureId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("AccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("NatureId");

                    b.ToTable("MainAccount","Foundation");
                });

            modelBuilder.Entity("FAMSWPF.Library.Models.Sample.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories","TestSchema");
                });

            modelBuilder.Entity("FAMSWPF.Library.Models.Sample.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId")
                        .HasName("IX_CategoryId_Test");

                    b.ToTable("Products","TestSchema");
                });

            modelBuilder.Entity("FAMSWPF.Library.Models.Assets.CurrentAssets.Bank", b =>
                {
                    b.HasOne("FAMSWPF.Library.Models.Foundation.MainAccount", "MainAccNavigation")
                        .WithOne("BankAccount")
                        .HasForeignKey("FAMSWPF.Library.Models.Assets.CurrentAssets.Bank", "MainAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FAMSWPF.Library.Models.Assets.CurrentAssets.Cash", b =>
                {
                    b.HasOne("FAMSWPF.Library.Models.Foundation.MainAccount", "MainAccNavigation")
                        .WithOne("CashAccount")
                        .HasForeignKey("FAMSWPF.Library.Models.Assets.CurrentAssets.Cash", "MainAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FAMSWPF.Library.Models.Foundation.MainAccount", b =>
                {
                    b.HasOne("FAMSWPF.Library.Models.Foundation.Currency", "CurrencyNavigation")
                        .WithMany("MainAccounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FAMSWPF.Library.Models.Foundation.AccountNature", "AccNatNavigation")
                        .WithMany("MainAccounts")
                        .HasForeignKey("NatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FAMSWPF.Library.Models.Sample.Product", b =>
                {
                    b.HasOne("FAMSWPF.Library.Models.Sample.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
